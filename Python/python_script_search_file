A Python script to search files greater than X days old

This kind of script is helpful when your server is low in disk space and needs to search for older files and then delete them.

import os
for dirpath, dirname, filename in os.walk("/etc"):
    for file in filename:
        comp_path= os.path.join(dirpath,file)

Once we get the complete path, the next step is to find when the particular file is created to do that with the time help of os.path.getctime(filename).
>>> os.path.getctime("/etc/hosts")
1623687666.8315635

But the output of the above command is in sec. Now it’s time to introduce a new Python module called datetime. 
datetime.datetime.fromtimestamp(os.path.getctime("/etc/hosts"))
datetime.datetime(2021, 6, 14, 9, 21, 6, 831563)

Now we have the date on which the file is created; the next step is to find the current date.
>>> datetime.datetime.now()
datetime.datetime(2021, 7, 4, 10, 31, 41, 664467)

The next step is to calculate the difference between the current date and the file creation date and use days() to get only the days.
time_diff=(today_date-file_creation_time).days

So your complete code will look like this
import os
import datetime

file_age=15
today_date=datetime.datetime.now()

for dir,dirpath,filename in os.walk("/var/log"):
    for file in filename:
        complete_path=os.path.join(dir,file)
        file_creation_time=datetime.datetime.fromtimestamp(os.path.getctime(complete_path))
        time_diff=(today_date-file_creation_time).days
        if time_diff> file_age:
            print(complete_path, time_diff)

*************************************************************************************************************************************************************************************************************************

A Python script to search files with specific extensions and get the file size

These kinds of scripts are useful when you want to perform the cleanup operation or searching for a specific type of file.
 In this code, we need to make a slight modification
import os
for dirpath, dirname, filename in os.walk("/etc/openldap"):
    for file in filename:
        comp_path= os.path.join(dirpath,file)
        if file == "hosts":
            print(comp_path)

To match the file with the specific extension, we will use the string method endswith(). Now the if condition will look like this
if file.endswith(".conf"):
To get the file size, we are going to use the os.path.getsize() method. This method checks the size of the specified path. It returns the size of the specified path in bytes.
file_size = os.path.getsize(comp_path)
print("File size is: ", file_size, "bytes")
So our final code will look like this
import os
for dirpath, dirname, filename in os.walk("/etc/openldap"):
    for file in filename:
        comp_path= os.path.join(dirpath,file)
        if file.endswith(".conf"):
            print(comp_path)
            file_size = os.path.getsize(comp_path)
            print("File size is: ", file_size, "bytes")



************************************************************************************************************************************************************************************************************************

A python script to search for a file
The idea behind it is to create a find utility using Python to pass directory names and files to search.
So far, our code looks like this, whereby using os.walk(), we are iterating over the /etc directory and then using os.path.join() we combine directory with the filename.
import os
for dirpath, dirname, filename in os.walk("/etc"):
    for file in filename:
        comp_path= os.path.join(dirpath,file)

To find out the specific file, we can use the if statement and then only print the complete path if the file matches.
if file == "hosts":
    print(comp_path)
So our complete code will look like below.
import os

for dirpath, dirname, filename in os.walk("/etc"):
    for file in filename:
        comp_path= os.path.join(dirpath,file)
        if file == "hosts":
            print(comp_path)
If you save this code in find_files.py and search for hosts file in /etc directory, you will get the below output.
python3 find_files.py           
/etc/hosts

The second version of this script is to make it user-friendly so that it will accept arguments like the path to search
1.Import the Python argparse library
import argparse
2. Create the parser
my_parser = argparse.ArgumentParser(description='Reading the d
3. Add optional and positional arguments to the parser. Here we are passing two-argument pathname to specify the path and filesearch for the file to search.
my_parser.add_argument("pathname",help='Please enter the directory path ')
my_parser.add_argument("filesearch",help='Please enter the filename to search')
4. Execute .parse_args()
args = my_parser.parse_args()
If you execute your script with the -h(help) option, you will get the output below.
python3 find_files.py -h

Now you need to make few changes to your code. Rather than passing /etc to os.walk(), you need to pass args.pathname, and similarly, rather than passing filename directly, i.e., hosts, you need to pass args.filesearch.
for dirpath, dirname, filename in os.walk(args.pathname):
    for file in filename:
        comp_path= os.path.join(dirpath,file)
        if file == args.filesearch:
            print(comp_path)
To execute your script.
python3 find_files.py /etc hosts
/etc/hosts
